//! Generated block implementations for [`V1_21_2`].
//!
//! @generated by 'TODO'
#![allow(
    missing_docs,
    clippy::cast_possible_truncation,
    clippy::unreadable_literal,
    clippy::wildcard_imports
)]

use froglight_protocol::versions::v1_21_2::V1_21_2;

use super::{attribute::*, block::*};
use crate::{BlockState, BlockStateExt};

impl BlockState<V1_21_2> for Air {
    fn resource_key(&self) -> &'static str { "minecraft:air" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Air {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Stone {
    fn resource_key(&self) -> &'static str { "minecraft:stone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Stone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Granite {
    fn resource_key(&self) -> &'static str { "minecraft:granite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Granite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedGranite {
    fn resource_key(&self) -> &'static str { "minecraft:polished_granite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedGranite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Diorite {
    fn resource_key(&self) -> &'static str { "minecraft:diorite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Diorite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDiorite {
    fn resource_key(&self) -> &'static str { "minecraft:polished_diorite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDiorite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Andesite {
    fn resource_key(&self) -> &'static str { "minecraft:andesite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Andesite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedAndesite {
    fn resource_key(&self) -> &'static str { "minecraft:polished_andesite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedAndesite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrassBlock {
    fn resource_key(&self) -> &'static str { "minecraft:grass_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrassBlock {
    type Attributes = SnowyBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Dirt {
    fn resource_key(&self) -> &'static str { "minecraft:dirt" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Dirt {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CoarseDirt {
    fn resource_key(&self) -> &'static str { "minecraft:coarse_dirt" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CoarseDirt {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Podzol {
    fn resource_key(&self) -> &'static str { "minecraft:podzol" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Podzol {
    type Attributes = SnowyBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Cobblestone {
    fn resource_key(&self) -> &'static str { "minecraft:cobblestone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Cobblestone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OakPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:oak_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SprucePlanks {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SprucePlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:birch_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for JunglePlanks {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JunglePlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakWood {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MangrovePlanks {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangrovePlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooMosaic {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_mosaic" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooMosaic {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceSapling {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SpruceSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchSapling {
    fn resource_key(&self) -> &'static str { "minecraft:birch_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleSapling {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JungleSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaSapling {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherrySapling {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherrySapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakSapling {
    type Attributes = StageIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangrovePropagule {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_propagule" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangrovePropagule {
    type Attributes = (AgeIntRangeAttribute_0_4, HangingBooleanAttribute, StageIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(5u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Bedrock {
    fn resource_key(&self) -> &'static str { "minecraft:bedrock" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Bedrock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Water {
    fn resource_key(&self) -> &'static str { "minecraft:water" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 100f32 }
    fn resistance(&self) -> f32 { 100f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Water {
    type Attributes = LevelIntRangeAttribute_0_15;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Lava {
    fn resource_key(&self) -> &'static str { "minecraft:lava" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 100f32 }
    fn resistance(&self) -> f32 { 100f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Lava {
    type Attributes = LevelIntRangeAttribute_0_15;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Sand {
    fn resource_key(&self) -> &'static str { "minecraft:sand" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Sand {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SuspiciousSand {
    fn resource_key(&self) -> &'static str { "minecraft:suspicious_sand" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.25f32 }
    fn resistance(&self) -> f32 { 0.25f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SuspiciousSand {
    type Attributes = DustedIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedSand {
    fn resource_key(&self) -> &'static str { "minecraft:red_sand" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedSand {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Gravel {
    fn resource_key(&self) -> &'static str { "minecraft:gravel" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Gravel {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SuspiciousGravel {
    fn resource_key(&self) -> &'static str { "minecraft:suspicious_gravel" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.25f32 }
    fn resistance(&self) -> f32 { 0.25f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SuspiciousGravel {
    type Attributes = DustedIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GoldOre {
    fn resource_key(&self) -> &'static str { "minecraft:gold_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GoldOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateGoldOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_gold_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateGoldOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for IronOre {
    fn resource_key(&self) -> &'static str { "minecraft:iron_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for IronOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateIronOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_iron_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateIronOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CoalOre {
    fn resource_key(&self) -> &'static str { "minecraft:coal_ore" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CoalOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateCoalOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_coal_ore" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateCoalOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherGoldOre {
    fn resource_key(&self) -> &'static str { "minecraft:nether_gold_ore" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherGoldOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OakLog {
    fn resource_key(&self) -> &'static str { "minecraft:oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceLog {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchLog {
    fn resource_key(&self) -> &'static str { "minecraft:birch_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleLog {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaLog {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryLog {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakLog {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakLog {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveLog {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveRoots {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_roots" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveRoots {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MuddyMangroveRoots {
    fn resource_key(&self) -> &'static str { "minecraft:muddy_mangrove_roots" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MuddyMangroveRoots {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooBlock {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooBlock {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedSpruceLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_spruce_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedSpruceLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedBirchLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_birch_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedBirchLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedJungleLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_jungle_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedJungleLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedAcaciaLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_acacia_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedAcaciaLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedCherryLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_cherry_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedCherryLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedDarkOakLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_dark_oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedDarkOakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedPaleOakLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_pale_oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedPaleOakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedOakLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_oak_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedOakLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedMangroveLog {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_mangrove_log" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedMangroveLog {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedBambooBlock {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_bamboo_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedBambooBlock {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakWood {
    fn resource_key(&self) -> &'static str { "minecraft:oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceWood {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchWood {
    fn resource_key(&self) -> &'static str { "minecraft:birch_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleWood {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaWood {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryWood {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakWood {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveWood {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedOakWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedOakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedSpruceWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_spruce_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedSpruceWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedBirchWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_birch_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedBirchWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedJungleWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_jungle_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedJungleWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedAcaciaWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_acacia_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedAcaciaWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedCherryWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_cherry_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedCherryWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedDarkOakWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_dark_oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedDarkOakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedPaleOakWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_pale_oak_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedPaleOakWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedMangroveWood {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_mangrove_wood" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedMangroveWood {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:oak_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:birch_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AzaleaLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:azalea_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AzaleaLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FloweringAzaleaLeaves {
    fn resource_key(&self) -> &'static str { "minecraft:flowering_azalea_leaves" }
    fn material(&self) -> &'static str { "minecraft:leaves;mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FloweringAzaleaLeaves {
    type Attributes = (DistanceIntRangeAttribute_1_7, PersistentBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(27u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Sponge {
    fn resource_key(&self) -> &'static str { "minecraft:sponge" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Sponge {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WetSponge {
    fn resource_key(&self) -> &'static str { "minecraft:wet_sponge" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WetSponge {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Glass {
    fn resource_key(&self) -> &'static str { "minecraft:glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Glass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LapisOre {
    fn resource_key(&self) -> &'static str { "minecraft:lapis_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LapisOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateLapisOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_lapis_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateLapisOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LapisBlock {
    fn resource_key(&self) -> &'static str { "minecraft:lapis_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LapisBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Dispenser {
    fn resource_key(&self) -> &'static str { "minecraft:dispenser" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Dispenser {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, TriggeredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Sandstone {
    fn resource_key(&self) -> &'static str { "minecraft:sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Sandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CutSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:cut_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NoteBlock {
    fn resource_key(&self) -> &'static str { "minecraft:note_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NoteBlock {
    type Attributes = (InstrumentEnumAttribute, NoteIntRangeAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteBed {
    fn resource_key(&self) -> &'static str { "minecraft:white_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeBed {
    fn resource_key(&self) -> &'static str { "minecraft:orange_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaBed {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueBed {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowBed {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeBed {
    fn resource_key(&self) -> &'static str { "minecraft:lime_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkBed {
    fn resource_key(&self) -> &'static str { "minecraft:pink_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayBed {
    fn resource_key(&self) -> &'static str { "minecraft:gray_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayBed {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanBed {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleBed {
    fn resource_key(&self) -> &'static str { "minecraft:purple_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueBed {
    fn resource_key(&self) -> &'static str { "minecraft:blue_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownBed {
    fn resource_key(&self) -> &'static str { "minecraft:brown_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenBed {
    fn resource_key(&self) -> &'static str { "minecraft:green_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedBed {
    fn resource_key(&self) -> &'static str { "minecraft:red_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackBed {
    fn resource_key(&self) -> &'static str { "minecraft:black_bed" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackBed {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OccupiedBooleanAttribute, PartEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PoweredRail {
    fn resource_key(&self) -> &'static str { "minecraft:powered_rail" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PoweredRail {
    type Attributes = (PoweredBooleanAttribute, ShapeEnumAttribute_NorthSouth_EastWest_AscendingEast_AscendingWest_AscendingNorth_AscendingSouth, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(13u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DetectorRail {
    fn resource_key(&self) -> &'static str { "minecraft:detector_rail" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DetectorRail {
    type Attributes = (PoweredBooleanAttribute, ShapeEnumAttribute_NorthSouth_EastWest_AscendingEast_AscendingWest_AscendingNorth_AscendingSouth, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(13u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StickyPiston {
    fn resource_key(&self) -> &'static str { "minecraft:sticky_piston" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StickyPiston {
    type Attributes = (ExtendedBooleanAttribute, FacingEnumAttribute_North_East_South_West_Up_Down);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Cobweb {
    fn resource_key(&self) -> &'static str { "minecraft:cobweb" }
    fn material(&self) -> &'static str { "minecraft:coweb" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4f32 }
    fn resistance(&self) -> f32 { 4f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Cobweb {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ShortGrass {
    fn resource_key(&self) -> &'static str { "minecraft:short_grass" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for ShortGrass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Fern {
    fn resource_key(&self) -> &'static str { "minecraft:fern" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Fern {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBush {
    fn resource_key(&self) -> &'static str { "minecraft:dead_bush" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBush {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Seagrass {
    fn resource_key(&self) -> &'static str { "minecraft:seagrass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Seagrass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TallSeagrass {
    fn resource_key(&self) -> &'static str { "minecraft:tall_seagrass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TallSeagrass {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Piston {
    fn resource_key(&self) -> &'static str { "minecraft:piston" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Piston {
    type Attributes = (ExtendedBooleanAttribute, FacingEnumAttribute_North_East_South_West_Up_Down);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PistonHead {
    fn resource_key(&self) -> &'static str { "minecraft:piston_head" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PistonHead {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, ShortBooleanAttribute, TypeEnumAttribute_Normal_Sticky);
    const DEFAULT: Self = Self(2u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteWool {
    fn resource_key(&self) -> &'static str { "minecraft:white_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeWool {
    fn resource_key(&self) -> &'static str { "minecraft:orange_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaWool {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueWool {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowWool {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeWool {
    fn resource_key(&self) -> &'static str { "minecraft:lime_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkWool {
    fn resource_key(&self) -> &'static str { "minecraft:pink_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayWool {
    fn resource_key(&self) -> &'static str { "minecraft:gray_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayWool {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanWool {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleWool {
    fn resource_key(&self) -> &'static str { "minecraft:purple_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueWool {
    fn resource_key(&self) -> &'static str { "minecraft:blue_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownWool {
    fn resource_key(&self) -> &'static str { "minecraft:brown_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenWool {
    fn resource_key(&self) -> &'static str { "minecraft:green_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedWool {
    fn resource_key(&self) -> &'static str { "minecraft:red_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackWool {
    fn resource_key(&self) -> &'static str { "minecraft:black_wool" }
    fn material(&self) -> &'static str { "minecraft:wool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackWool {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MovingPiston {
    fn resource_key(&self) -> &'static str { "minecraft:moving_piston" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MovingPiston {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, TypeEnumAttribute_Normal_Sticky);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Dandelion {
    fn resource_key(&self) -> &'static str { "minecraft:dandelion" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Dandelion {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Torchflower {
    fn resource_key(&self) -> &'static str { "minecraft:torchflower" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Torchflower {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Poppy {
    fn resource_key(&self) -> &'static str { "minecraft:poppy" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Poppy {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueOrchid {
    fn resource_key(&self) -> &'static str { "minecraft:blue_orchid" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BlueOrchid {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Allium {
    fn resource_key(&self) -> &'static str { "minecraft:allium" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Allium {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for AzureBluet {
    fn resource_key(&self) -> &'static str { "minecraft:azure_bluet" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AzureBluet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedTulip {
    fn resource_key(&self) -> &'static str { "minecraft:red_tulip" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeTulip {
    fn resource_key(&self) -> &'static str { "minecraft:orange_tulip" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OrangeTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteTulip {
    fn resource_key(&self) -> &'static str { "minecraft:white_tulip" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WhiteTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkTulip {
    fn resource_key(&self) -> &'static str { "minecraft:pink_tulip" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PinkTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OxeyeDaisy {
    fn resource_key(&self) -> &'static str { "minecraft:oxeye_daisy" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OxeyeDaisy {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Cornflower {
    fn resource_key(&self) -> &'static str { "minecraft:cornflower" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Cornflower {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WitherRose {
    fn resource_key(&self) -> &'static str { "minecraft:wither_rose" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WitherRose {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LilyOfTheValley {
    fn resource_key(&self) -> &'static str { "minecraft:lily_of_the_valley" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LilyOfTheValley {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownMushroom {
    fn resource_key(&self) -> &'static str { "minecraft:brown_mushroom" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrownMushroom {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedMushroom {
    fn resource_key(&self) -> &'static str { "minecraft:red_mushroom" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedMushroom {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GoldBlock {
    fn resource_key(&self) -> &'static str { "minecraft:gold_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GoldBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for IronBlock {
    fn resource_key(&self) -> &'static str { "minecraft:iron_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for IronBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Bricks {
    fn resource_key(&self) -> &'static str { "minecraft:bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Bricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Tnt {
    fn resource_key(&self) -> &'static str { "minecraft:tnt" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Tnt {
    type Attributes = UnstableBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Bookshelf {
    fn resource_key(&self) -> &'static str { "minecraft:bookshelf" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Bookshelf {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledBookshelf {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_bookshelf" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledBookshelf {
    type Attributes = (FacingEnumAttribute_North_South_West_East, Slot0OccupiedBooleanAttribute, Slot1OccupiedBooleanAttribute, Slot2OccupiedBooleanAttribute, Slot3OccupiedBooleanAttribute, Slot4OccupiedBooleanAttribute, Slot5OccupiedBooleanAttribute);
    const DEFAULT: Self = Self(63u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyCobblestone {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_cobblestone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyCobblestone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Obsidian {
    fn resource_key(&self) -> &'static str { "minecraft:obsidian" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Obsidian {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Torch {
    fn resource_key(&self) -> &'static str { "minecraft:torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 14u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Torch {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WallTorch {
    fn resource_key(&self) -> &'static str { "minecraft:wall_torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 14u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WallTorch {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Fire {
    fn resource_key(&self) -> &'static str { "minecraft:fire" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Fire {
    type Attributes = (AgeIntRangeAttribute_0_15, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulFire {
    fn resource_key(&self) -> &'static str { "minecraft:soul_fire" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SoulFire {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Spawner {
    fn resource_key(&self) -> &'static str { "minecraft:spawner" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Spawner {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CreakingHeart {
    fn resource_key(&self) -> &'static str { "minecraft:creaking_heart" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CreakingHeart {
    type Attributes = (AxisEnumAttribute_X_Y_Z, CreakingEnumAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakStairs {
    fn resource_key(&self) -> &'static str { "minecraft:oak_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Chest {
    fn resource_key(&self) -> &'static str { "minecraft:chest" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Chest {
    type Attributes = (FacingEnumAttribute_North_South_West_East, TypeEnumAttribute_Single_Left_Right, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneWire {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_wire" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedstoneWire {
    type Attributes = (EastEnumAttribute_Up_Side_None, NorthEnumAttribute_Up_Side_None, PowerIntRangeAttribute, SouthEnumAttribute_Up_Side_None, WestEnumAttribute_Up_Side_None);
    const DEFAULT: Self = Self(1160u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DiamondOre {
    fn resource_key(&self) -> &'static str { "minecraft:diamond_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DiamondOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateDiamondOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_diamond_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateDiamondOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DiamondBlock {
    fn resource_key(&self) -> &'static str { "minecraft:diamond_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DiamondBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CraftingTable {
    fn resource_key(&self) -> &'static str { "minecraft:crafting_table" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CraftingTable {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Wheat {
    fn resource_key(&self) -> &'static str { "minecraft:wheat" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Wheat {
    type Attributes = AgeIntRangeAttribute_0_7;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Farmland {
    fn resource_key(&self) -> &'static str { "minecraft:farmland" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Farmland {
    type Attributes = MoistureIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Furnace {
    fn resource_key(&self) -> &'static str { "minecraft:furnace" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Furnace {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakSign {
    fn resource_key(&self) -> &'static str { "minecraft:oak_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceSign {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SpruceSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchSign {
    fn resource_key(&self) -> &'static str { "minecraft:birch_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaSign {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherrySign {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherrySign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleSign {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JungleSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakSign {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakSign {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveSign {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangroveSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooSign {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakDoor {
    fn resource_key(&self) -> &'static str { "minecraft:oak_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Ladder {
    fn resource_key(&self) -> &'static str { "minecraft:ladder" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Ladder {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Rail {
    fn resource_key(&self) -> &'static str { "minecraft:rail" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Rail {
    type Attributes = (ShapeEnumAttribute_NorthSouth_EastWest_AscendingEast_AscendingWest_AscendingNorth_AscendingSouth_SouthEast_SouthWest_NorthWest_NorthEast, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CobblestoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:cobblestone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobblestoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:oak_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SpruceWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:birch_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherryWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JungleWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangroveWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:oak_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SpruceHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:birch_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherryHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JungleHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:warped_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangroveHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooHangingSign {
    type Attributes = (AttachedBooleanAttribute, RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(33u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:oak_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:birch_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:warped_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooWallHangingSign {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_wall_hanging_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooWallHangingSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Lever {
    fn resource_key(&self) -> &'static str { "minecraft:lever" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Lever {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StonePressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:stone_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for StonePressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for IronDoor {
    fn resource_key(&self) -> &'static str { "minecraft:iron_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for IronDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:oak_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SprucePressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SprucePressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:birch_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JunglePressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JunglePressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherryPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangrovePressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangrovePressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneOre {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedstoneOre {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateRedstoneOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_redstone_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateRedstoneOre {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneTorch {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 7u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedstoneTorch {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneWallTorch {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_wall_torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 7u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedstoneWallTorch {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneButton {
    fn resource_key(&self) -> &'static str { "minecraft:stone_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for StoneButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Snow {
    fn resource_key(&self) -> &'static str { "minecraft:snow" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Snow {
    type Attributes = LayersIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Ice {
    fn resource_key(&self) -> &'static str { "minecraft:ice" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Ice {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SnowBlock {
    fn resource_key(&self) -> &'static str { "minecraft:snow_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SnowBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Cactus {
    fn resource_key(&self) -> &'static str { "minecraft:cactus" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Cactus {
    type Attributes = AgeIntRangeAttribute_0_15;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Clay {
    fn resource_key(&self) -> &'static str { "minecraft:clay" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Clay {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SugarCane {
    fn resource_key(&self) -> &'static str { "minecraft:sugar_cane" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SugarCane {
    type Attributes = AgeIntRangeAttribute_0_15;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Jukebox {
    fn resource_key(&self) -> &'static str { "minecraft:jukebox" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Jukebox {
    type Attributes = HasRecordBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakFence {
    fn resource_key(&self) -> &'static str { "minecraft:oak_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Netherrack {
    fn resource_key(&self) -> &'static str { "minecraft:netherrack" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Netherrack {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulSand {
    fn resource_key(&self) -> &'static str { "minecraft:soul_sand" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SoulSand {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulSoil {
    fn resource_key(&self) -> &'static str { "minecraft:soul_soil" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SoulSoil {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Basalt {
    fn resource_key(&self) -> &'static str { "minecraft:basalt" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Basalt {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBasalt {
    fn resource_key(&self) -> &'static str { "minecraft:polished_basalt" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBasalt {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulTorch {
    fn resource_key(&self) -> &'static str { "minecraft:soul_torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SoulTorch {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulWallTorch {
    fn resource_key(&self) -> &'static str { "minecraft:soul_wall_torch" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SoulWallTorch {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Glowstone {
    fn resource_key(&self) -> &'static str { "minecraft:glowstone" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Glowstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherPortal {
    fn resource_key(&self) -> &'static str { "minecraft:nether_portal" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 11u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for NetherPortal {
    type Attributes = AxisEnumAttribute_X_Z;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CarvedPumpkin {
    fn resource_key(&self) -> &'static str { "minecraft:carved_pumpkin" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CarvedPumpkin {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JackOLantern {
    fn resource_key(&self) -> &'static str { "minecraft:jack_o_lantern" }
    fn material(&self) -> &'static str { "minecraft:gourd;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JackOLantern {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Cake {
    fn resource_key(&self) -> &'static str { "minecraft:cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Cake {
    type Attributes = BitesIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Repeater {
    fn resource_key(&self) -> &'static str { "minecraft:repeater" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Repeater {
    type Attributes = (DelayIntRangeAttribute, FacingEnumAttribute_North_South_West_East, LockedBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:white_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:orange_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:lime_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:pink_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:gray_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:purple_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:blue_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:brown_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:green_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:red_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackStainedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:black_stained_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackStainedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OakTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:oak_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:birch_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrackedStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:cracked_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrackedStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PackedMud {
    fn resource_key(&self) -> &'static str { "minecraft:packed_mud" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PackedMud {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MudBricks {
    fn resource_key(&self) -> &'static str { "minecraft:mud_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MudBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedStone {
    fn resource_key(&self) -> &'static str { "minecraft:infested_stone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedStone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedCobblestone {
    fn resource_key(&self) -> &'static str { "minecraft:infested_cobblestone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedCobblestone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:infested_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedMossyStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:infested_mossy_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedMossyStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedCrackedStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:infested_cracked_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedCrackedStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedChiseledStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:infested_chiseled_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedChiseledStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownMushroomBlock {
    fn resource_key(&self) -> &'static str { "minecraft:brown_mushroom_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownMushroomBlock {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedMushroomBlock {
    fn resource_key(&self) -> &'static str { "minecraft:red_mushroom_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedMushroomBlock {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MushroomStem {
    fn resource_key(&self) -> &'static str { "minecraft:mushroom_stem" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MushroomStem {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for IronBars {
    fn resource_key(&self) -> &'static str { "minecraft:iron_bars" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for IronBars {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Chain {
    fn resource_key(&self) -> &'static str { "minecraft:chain" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Chain {
    type Attributes = (AxisEnumAttribute_X_Y_Z, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Pumpkin {
    fn resource_key(&self) -> &'static str { "minecraft:pumpkin" }
    fn material(&self) -> &'static str { "minecraft:gourd;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Pumpkin {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Melon {
    fn resource_key(&self) -> &'static str { "minecraft:melon" }
    fn material(&self) -> &'static str { "minecraft:gourd;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Melon {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for AttachedPumpkinStem {
    fn resource_key(&self) -> &'static str { "minecraft:attached_pumpkin_stem" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AttachedPumpkinStem {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AttachedMelonStem {
    fn resource_key(&self) -> &'static str { "minecraft:attached_melon_stem" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AttachedMelonStem {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PumpkinStem {
    fn resource_key(&self) -> &'static str { "minecraft:pumpkin_stem" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PumpkinStem {
    type Attributes = AgeIntRangeAttribute_0_7;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MelonStem {
    fn resource_key(&self) -> &'static str { "minecraft:melon_stem" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MelonStem {
    type Attributes = AgeIntRangeAttribute_0_7;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Vine {
    fn resource_key(&self) -> &'static str { "minecraft:vine" }
    fn material(&self) -> &'static str { "minecraft:vine_or_glow_lichen;plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Vine {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GlowLichen {
    fn resource_key(&self) -> &'static str { "minecraft:glow_lichen" }
    fn material(&self) -> &'static str { "minecraft:vine_or_glow_lichen;plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for GlowLichen {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(127u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:oak_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:stone_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MudBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:mud_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MudBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Mycelium {
    fn resource_key(&self) -> &'static str { "minecraft:mycelium" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Mycelium {
    type Attributes = SnowyBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LilyPad {
    fn resource_key(&self) -> &'static str { "minecraft:lily_pad" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LilyPad {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherBricks {
    fn resource_key(&self) -> &'static str { "minecraft:nether_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherBrickFence {
    fn resource_key(&self) -> &'static str { "minecraft:nether_brick_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherBrickFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:nether_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherWart {
    fn resource_key(&self) -> &'static str { "minecraft:nether_wart" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for NetherWart {
    type Attributes = AgeIntRangeAttribute_0_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EnchantingTable {
    fn resource_key(&self) -> &'static str { "minecraft:enchanting_table" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 7u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EnchantingTable {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrewingStand {
    fn resource_key(&self) -> &'static str { "minecraft:brewing_stand" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrewingStand {
    type Attributes = (HasBottle0BooleanAttribute, HasBottle1BooleanAttribute, HasBottle2BooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Cauldron {
    fn resource_key(&self) -> &'static str { "minecraft:cauldron" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Cauldron {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaterCauldron {
    fn resource_key(&self) -> &'static str { "minecraft:water_cauldron" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaterCauldron {
    type Attributes = LevelIntRangeAttribute_1_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LavaCauldron {
    fn resource_key(&self) -> &'static str { "minecraft:lava_cauldron" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LavaCauldron {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PowderSnowCauldron {
    fn resource_key(&self) -> &'static str { "minecraft:powder_snow_cauldron" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PowderSnowCauldron {
    type Attributes = LevelIntRangeAttribute_1_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndPortal {
    fn resource_key(&self) -> &'static str { "minecraft:end_portal" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for EndPortal {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for EndPortalFrame {
    fn resource_key(&self) -> &'static str { "minecraft:end_portal_frame" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndPortalFrame {
    type Attributes = (EyeBooleanAttribute, FacingEnumAttribute_North_South_West_East);
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndStone {
    fn resource_key(&self) -> &'static str { "minecraft:end_stone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndStone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DragonEgg {
    fn resource_key(&self) -> &'static str { "minecraft:dragon_egg" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DragonEgg {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneLamp {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_lamp" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedstoneLamp {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Cocoa {
    fn resource_key(&self) -> &'static str { "minecraft:cocoa" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Cocoa {
    type Attributes = (AgeIntRangeAttribute_0_2, FacingEnumAttribute_North_South_West_East);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SandstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:sandstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SandstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EmeraldOre {
    fn resource_key(&self) -> &'static str { "minecraft:emerald_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EmeraldOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateEmeraldOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_emerald_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateEmeraldOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for EnderChest {
    fn resource_key(&self) -> &'static str { "minecraft:ender_chest" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 22.5f32 }
    fn resistance(&self) -> f32 { 600f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 7u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EnderChest {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TripwireHook {
    fn resource_key(&self) -> &'static str { "minecraft:tripwire_hook" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TripwireHook {
    type Attributes = (AttachedBooleanAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Tripwire {
    fn resource_key(&self) -> &'static str { "minecraft:tripwire" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Tripwire {
    type Attributes = (AttachedBooleanAttribute, DisarmedBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, PoweredBooleanAttribute, SouthBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(127u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EmeraldBlock {
    fn resource_key(&self) -> &'static str { "minecraft:emerald_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EmeraldBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceStairs {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchStairs {
    fn resource_key(&self) -> &'static str { "minecraft:birch_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleStairs {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CommandBlock {
    fn resource_key(&self) -> &'static str { "minecraft:command_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CommandBlock {
    type Attributes = (ConditionalBooleanAttribute, FacingEnumAttribute_North_East_South_West_Up_Down);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Beacon {
    fn resource_key(&self) -> &'static str { "minecraft:beacon" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Beacon {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CobblestoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:cobblestone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobblestoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyCobblestoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_cobblestone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyCobblestoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FlowerPot {
    fn resource_key(&self) -> &'static str { "minecraft:flower_pot" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FlowerPot {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedTorchflower {
    fn resource_key(&self) -> &'static str { "minecraft:potted_torchflower" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedTorchflower {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedOakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedOakSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedSpruceSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_spruce_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedSpruceSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedBirchSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_birch_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedBirchSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedJungleSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_jungle_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedJungleSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedAcaciaSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_acacia_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedAcaciaSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedCherrySapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_cherry_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedCherrySapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedDarkOakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_dark_oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedDarkOakSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedPaleOakSapling {
    fn resource_key(&self) -> &'static str { "minecraft:potted_pale_oak_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedPaleOakSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedMangrovePropagule {
    fn resource_key(&self) -> &'static str { "minecraft:potted_mangrove_propagule" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedMangrovePropagule {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedFern {
    fn resource_key(&self) -> &'static str { "minecraft:potted_fern" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedFern {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedDandelion {
    fn resource_key(&self) -> &'static str { "minecraft:potted_dandelion" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedDandelion {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedPoppy {
    fn resource_key(&self) -> &'static str { "minecraft:potted_poppy" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedPoppy {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedBlueOrchid {
    fn resource_key(&self) -> &'static str { "minecraft:potted_blue_orchid" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedBlueOrchid {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedAllium {
    fn resource_key(&self) -> &'static str { "minecraft:potted_allium" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedAllium {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedAzureBluet {
    fn resource_key(&self) -> &'static str { "minecraft:potted_azure_bluet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedAzureBluet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedRedTulip {
    fn resource_key(&self) -> &'static str { "minecraft:potted_red_tulip" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedRedTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedOrangeTulip {
    fn resource_key(&self) -> &'static str { "minecraft:potted_orange_tulip" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedOrangeTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedWhiteTulip {
    fn resource_key(&self) -> &'static str { "minecraft:potted_white_tulip" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedWhiteTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedPinkTulip {
    fn resource_key(&self) -> &'static str { "minecraft:potted_pink_tulip" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedPinkTulip {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedOxeyeDaisy {
    fn resource_key(&self) -> &'static str { "minecraft:potted_oxeye_daisy" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedOxeyeDaisy {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedCornflower {
    fn resource_key(&self) -> &'static str { "minecraft:potted_cornflower" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedCornflower {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedLilyOfTheValley {
    fn resource_key(&self) -> &'static str { "minecraft:potted_lily_of_the_valley" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedLilyOfTheValley {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedWitherRose {
    fn resource_key(&self) -> &'static str { "minecraft:potted_wither_rose" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedWitherRose {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedRedMushroom {
    fn resource_key(&self) -> &'static str { "minecraft:potted_red_mushroom" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedRedMushroom {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedBrownMushroom {
    fn resource_key(&self) -> &'static str { "minecraft:potted_brown_mushroom" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedBrownMushroom {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedDeadBush {
    fn resource_key(&self) -> &'static str { "minecraft:potted_dead_bush" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedDeadBush {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedCactus {
    fn resource_key(&self) -> &'static str { "minecraft:potted_cactus" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedCactus {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Carrots {
    fn resource_key(&self) -> &'static str { "minecraft:carrots" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Carrots {
    type Attributes = AgeIntRangeAttribute_0_7;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Potatoes {
    fn resource_key(&self) -> &'static str { "minecraft:potatoes" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Potatoes {
    type Attributes = AgeIntRangeAttribute_0_7;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakButton {
    fn resource_key(&self) -> &'static str { "minecraft:oak_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OakButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceButton {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SpruceButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchButton {
    fn resource_key(&self) -> &'static str { "minecraft:birch_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BirchButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleButton {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for JungleButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaButton {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for AcaciaButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryButton {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CherryButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakButton {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DarkOakButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakButton {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleOakButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveButton {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MangroveButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooButton {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SkeletonSkull {
    fn resource_key(&self) -> &'static str { "minecraft:skeleton_skull" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SkeletonSkull {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SkeletonWallSkull {
    fn resource_key(&self) -> &'static str { "minecraft:skeleton_wall_skull" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SkeletonWallSkull {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WitherSkeletonSkull {
    fn resource_key(&self) -> &'static str { "minecraft:wither_skeleton_skull" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WitherSkeletonSkull {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WitherSkeletonWallSkull {
    fn resource_key(&self) -> &'static str { "minecraft:wither_skeleton_wall_skull" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WitherSkeletonWallSkull {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ZombieHead {
    fn resource_key(&self) -> &'static str { "minecraft:zombie_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ZombieHead {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ZombieWallHead {
    fn resource_key(&self) -> &'static str { "minecraft:zombie_wall_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ZombieWallHead {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PlayerHead {
    fn resource_key(&self) -> &'static str { "minecraft:player_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PlayerHead {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PlayerWallHead {
    fn resource_key(&self) -> &'static str { "minecraft:player_wall_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PlayerWallHead {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CreeperHead {
    fn resource_key(&self) -> &'static str { "minecraft:creeper_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CreeperHead {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CreeperWallHead {
    fn resource_key(&self) -> &'static str { "minecraft:creeper_wall_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CreeperWallHead {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DragonHead {
    fn resource_key(&self) -> &'static str { "minecraft:dragon_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DragonHead {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DragonWallHead {
    fn resource_key(&self) -> &'static str { "minecraft:dragon_wall_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DragonWallHead {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PiglinHead {
    fn resource_key(&self) -> &'static str { "minecraft:piglin_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PiglinHead {
    type Attributes = (PoweredBooleanAttribute, RotationIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PiglinWallHead {
    fn resource_key(&self) -> &'static str { "minecraft:piglin_wall_head" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PiglinWallHead {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Anvil {
    fn resource_key(&self) -> &'static str { "minecraft:anvil" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Anvil {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChippedAnvil {
    fn resource_key(&self) -> &'static str { "minecraft:chipped_anvil" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChippedAnvil {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DamagedAnvil {
    fn resource_key(&self) -> &'static str { "minecraft:damaged_anvil" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DamagedAnvil {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TrappedChest {
    fn resource_key(&self) -> &'static str { "minecraft:trapped_chest" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TrappedChest {
    type Attributes = (FacingEnumAttribute_North_South_West_East, TypeEnumAttribute_Single_Left_Right, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightWeightedPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:light_weighted_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LightWeightedPressurePlate {
    type Attributes = PowerIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HeavyWeightedPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:heavy_weighted_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for HeavyWeightedPressurePlate {
    type Attributes = PowerIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Comparator {
    fn resource_key(&self) -> &'static str { "minecraft:comparator" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Comparator {
    type Attributes = (FacingEnumAttribute_North_South_West_East, ModeEnumAttribute_Compare_Subtract, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DaylightDetector {
    fn resource_key(&self) -> &'static str { "minecraft:daylight_detector" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DaylightDetector {
    type Attributes = (InvertedBooleanAttribute, PowerIntRangeAttribute);
    const DEFAULT: Self = Self(16u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedstoneBlock {
    fn resource_key(&self) -> &'static str { "minecraft:redstone_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedstoneBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherQuartzOre {
    fn resource_key(&self) -> &'static str { "minecraft:nether_quartz_ore" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherQuartzOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Hopper {
    fn resource_key(&self) -> &'static str { "minecraft:hopper" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 4.8f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Hopper {
    type Attributes = (EnabledBooleanAttribute, FacingEnumAttribute_Down_North_South_West_East);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for QuartzBlock {
    fn resource_key(&self) -> &'static str { "minecraft:quartz_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for QuartzBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledQuartzBlock {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_quartz_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledQuartzBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for QuartzPillar {
    fn resource_key(&self) -> &'static str { "minecraft:quartz_pillar" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for QuartzPillar {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for QuartzStairs {
    fn resource_key(&self) -> &'static str { "minecraft:quartz_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for QuartzStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ActivatorRail {
    fn resource_key(&self) -> &'static str { "minecraft:activator_rail" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.7f32 }
    fn resistance(&self) -> f32 { 0.7f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for ActivatorRail {
    type Attributes = (PoweredBooleanAttribute, ShapeEnumAttribute_NorthSouth_EastWest_AscendingEast_AscendingWest_AscendingNorth_AscendingSouth, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(13u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Dropper {
    fn resource_key(&self) -> &'static str { "minecraft:dropper" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Dropper {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, TriggeredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:white_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:orange_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:lime_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:pink_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:gray_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:purple_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:blue_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:brown_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:green_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:red_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:black_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackTerracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:white_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:orange_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:lime_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:pink_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:gray_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:purple_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:blue_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:brown_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:green_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:red_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackStainedGlassPane {
    fn resource_key(&self) -> &'static str { "minecraft:black_stained_glass_pane" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackStainedGlassPane {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaStairs {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryStairs {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakStairs {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakStairs {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveStairs {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooStairs {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooMosaicStairs {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_mosaic_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooMosaicStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SlimeBlock {
    fn resource_key(&self) -> &'static str { "minecraft:slime_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SlimeBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Barrier {
    fn resource_key(&self) -> &'static str { "minecraft:barrier" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000.8f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Barrier {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Light {
    fn resource_key(&self) -> &'static str { "minecraft:light" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000.8f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Light {
    type Attributes = (LevelIntRangeAttribute_0_15, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for IronTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:iron_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for IronTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Prismarine {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Prismarine {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineBricks {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkPrismarine {
    fn resource_key(&self) -> &'static str { "minecraft:dark_prismarine" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkPrismarine {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineStairs {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkPrismarineStairs {
    fn resource_key(&self) -> &'static str { "minecraft:dark_prismarine_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkPrismarineStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineSlab {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkPrismarineSlab {
    fn resource_key(&self) -> &'static str { "minecraft:dark_prismarine_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkPrismarineSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SeaLantern {
    fn resource_key(&self) -> &'static str { "minecraft:sea_lantern" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SeaLantern {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for HayBlock {
    fn resource_key(&self) -> &'static str { "minecraft:hay_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for HayBlock {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:white_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:orange_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:lime_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:pink_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:gray_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:purple_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:blue_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:brown_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:green_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:red_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:black_carpet" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Terracotta {
    fn resource_key(&self) -> &'static str { "minecraft:terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Terracotta {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CoalBlock {
    fn resource_key(&self) -> &'static str { "minecraft:coal_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CoalBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PackedIce {
    fn resource_key(&self) -> &'static str { "minecraft:packed_ice" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PackedIce {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Sunflower {
    fn resource_key(&self) -> &'static str { "minecraft:sunflower" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Sunflower {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Lilac {
    fn resource_key(&self) -> &'static str { "minecraft:lilac" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Lilac {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RoseBush {
    fn resource_key(&self) -> &'static str { "minecraft:rose_bush" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RoseBush {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Peony {
    fn resource_key(&self) -> &'static str { "minecraft:peony" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Peony {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TallGrass {
    fn resource_key(&self) -> &'static str { "minecraft:tall_grass" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TallGrass {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LargeFern {
    fn resource_key(&self) -> &'static str { "minecraft:large_fern" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LargeFern {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteBanner {
    fn resource_key(&self) -> &'static str { "minecraft:white_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WhiteBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeBanner {
    fn resource_key(&self) -> &'static str { "minecraft:orange_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OrangeBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaBanner {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MagentaBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueBanner {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LightBlueBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowBanner {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for YellowBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeBanner {
    fn resource_key(&self) -> &'static str { "minecraft:lime_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LimeBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkBanner {
    fn resource_key(&self) -> &'static str { "minecraft:pink_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PinkBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayBanner {
    fn resource_key(&self) -> &'static str { "minecraft:gray_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for GrayBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayBanner {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LightGrayBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanBanner {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CyanBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleBanner {
    fn resource_key(&self) -> &'static str { "minecraft:purple_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PurpleBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueBanner {
    fn resource_key(&self) -> &'static str { "minecraft:blue_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BlueBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownBanner {
    fn resource_key(&self) -> &'static str { "minecraft:brown_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrownBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenBanner {
    fn resource_key(&self) -> &'static str { "minecraft:green_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for GreenBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedBanner {
    fn resource_key(&self) -> &'static str { "minecraft:red_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackBanner {
    fn resource_key(&self) -> &'static str { "minecraft:black_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BlackBanner {
    type Attributes = RotationIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:white_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WhiteWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:orange_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for OrangeWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for MagentaWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LightBlueWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for YellowWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:lime_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LimeWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:pink_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PinkWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:gray_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for GrayWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for LightGrayWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CyanWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:purple_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PurpleWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:blue_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BlueWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:brown_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrownWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:green_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for GreenWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:red_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for RedWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackWallBanner {
    fn resource_key(&self) -> &'static str { "minecraft:black_wall_banner" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BlackWallBanner {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:red_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledRedSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_red_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledRedSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CutRedSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:cut_red_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutRedSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedSandstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:red_sandstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedSandstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OakSlab {
    fn resource_key(&self) -> &'static str { "minecraft:oak_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OakSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceSlab {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchSlab {
    fn resource_key(&self) -> &'static str { "minecraft:birch_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleSlab {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaSlab {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherrySlab {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherrySlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakSlab {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakSlab {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveSlab {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooSlab {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooMosaicSlab {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_mosaic_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooMosaicSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:stone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothStoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_stone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothStoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CutSandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:cut_sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutSandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PetrifiedOakSlab {
    fn resource_key(&self) -> &'static str { "minecraft:petrified_oak_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PetrifiedOakSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CobblestoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:cobblestone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobblestoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:stone_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MudBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:mud_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MudBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:nether_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for QuartzSlab {
    fn resource_key(&self) -> &'static str { "minecraft:quartz_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for QuartzSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedSandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:red_sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedSandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CutRedSandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:cut_red_sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutRedSandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpurSlab {
    fn resource_key(&self) -> &'static str { "minecraft:purpur_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpurSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothStone {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_stone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothStone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothQuartz {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_quartz" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothQuartz {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothRedSandstone {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_red_sandstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothRedSandstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:birch_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceFence {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchFence {
    fn resource_key(&self) -> &'static str { "minecraft:birch_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleFence {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaFence {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryFence {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakFence {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakFence {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveFence {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooFence {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SpruceDoor {
    fn resource_key(&self) -> &'static str { "minecraft:spruce_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SpruceDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BirchDoor {
    fn resource_key(&self) -> &'static str { "minecraft:birch_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BirchDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for JungleDoor {
    fn resource_key(&self) -> &'static str { "minecraft:jungle_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for JungleDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AcaciaDoor {
    fn resource_key(&self) -> &'static str { "minecraft:acacia_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AcaciaDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CherryDoor {
    fn resource_key(&self) -> &'static str { "minecraft:cherry_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CherryDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DarkOakDoor {
    fn resource_key(&self) -> &'static str { "minecraft:dark_oak_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DarkOakDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleOakDoor {
    fn resource_key(&self) -> &'static str { "minecraft:pale_oak_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleOakDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MangroveDoor {
    fn resource_key(&self) -> &'static str { "minecraft:mangrove_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MangroveDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooDoor {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BambooDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndRod {
    fn resource_key(&self) -> &'static str { "minecraft:end_rod" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 14u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndRod {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChorusPlant {
    fn resource_key(&self) -> &'static str { "minecraft:chorus_plant" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChorusPlant {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(63u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChorusFlower {
    fn resource_key(&self) -> &'static str { "minecraft:chorus_flower" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChorusFlower {
    type Attributes = AgeIntRangeAttribute_0_5;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpurBlock {
    fn resource_key(&self) -> &'static str { "minecraft:purpur_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpurBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpurPillar {
    fn resource_key(&self) -> &'static str { "minecraft:purpur_pillar" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpurPillar {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpurStairs {
    fn resource_key(&self) -> &'static str { "minecraft:purpur_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpurStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndStoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:end_stone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndStoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TorchflowerCrop {
    fn resource_key(&self) -> &'static str { "minecraft:torchflower_crop" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TorchflowerCrop {
    type Attributes = AgeIntRangeAttribute_0_1;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PitcherCrop {
    fn resource_key(&self) -> &'static str { "minecraft:pitcher_crop" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PitcherCrop {
    type Attributes = (AgeIntRangeAttribute_0_4, HalfEnumAttribute_Upper_Lower);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PitcherPlant {
    fn resource_key(&self) -> &'static str { "minecraft:pitcher_plant" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PitcherPlant {
    type Attributes = HalfEnumAttribute_Upper_Lower;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Beetroots {
    fn resource_key(&self) -> &'static str { "minecraft:beetroots" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Beetroots {
    type Attributes = AgeIntRangeAttribute_0_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DirtPath {
    fn resource_key(&self) -> &'static str { "minecraft:dirt_path" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.65f32 }
    fn resistance(&self) -> f32 { 0.65f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DirtPath {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for EndGateway {
    fn resource_key(&self) -> &'static str { "minecraft:end_gateway" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for EndGateway {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RepeatingCommandBlock {
    fn resource_key(&self) -> &'static str { "minecraft:repeating_command_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RepeatingCommandBlock {
    type Attributes = (ConditionalBooleanAttribute, FacingEnumAttribute_North_East_South_West_Up_Down);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChainCommandBlock {
    fn resource_key(&self) -> &'static str { "minecraft:chain_command_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChainCommandBlock {
    type Attributes = (ConditionalBooleanAttribute, FacingEnumAttribute_North_East_South_West_Up_Down);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FrostedIce {
    fn resource_key(&self) -> &'static str { "minecraft:frosted_ice" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FrostedIce {
    type Attributes = AgeIntRangeAttribute_0_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagmaBlock {
    fn resource_key(&self) -> &'static str { "minecraft:magma_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 3u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagmaBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherWartBlock {
    fn resource_key(&self) -> &'static str { "minecraft:nether_wart_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherWartBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedNetherBricks {
    fn resource_key(&self) -> &'static str { "minecraft:red_nether_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedNetherBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BoneBlock {
    fn resource_key(&self) -> &'static str { "minecraft:bone_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BoneBlock {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StructureVoid {
    fn resource_key(&self) -> &'static str { "minecraft:structure_void" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for StructureVoid {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Observer {
    fn resource_key(&self) -> &'static str { "minecraft:observer" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Observer {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(5u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:white_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:orange_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:lime_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:pink_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:gray_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:purple_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:blue_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:brown_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:green_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:red_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackShulkerBox {
    fn resource_key(&self) -> &'static str { "minecraft:black_shulker_box" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackShulkerBox {
    type Attributes = FacingEnumAttribute_North_East_South_West_Up_Down;
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:white_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:orange_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:lime_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:pink_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:gray_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:purple_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:blue_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:brown_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:green_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:red_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackGlazedTerracotta {
    fn resource_key(&self) -> &'static str { "minecraft:black_glazed_terracotta" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.4f32 }
    fn resistance(&self) -> f32 { 1.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackGlazedTerracotta {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:white_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:orange_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:lime_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:pink_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:gray_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:purple_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:blue_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:brown_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:green_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:red_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackConcrete {
    fn resource_key(&self) -> &'static str { "minecraft:black_concrete" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.8f32 }
    fn resistance(&self) -> f32 { 1.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackConcrete {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:white_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:orange_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:lime_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:pink_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:gray_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:purple_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:blue_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:brown_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:green_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RedConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:red_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackConcretePowder {
    fn resource_key(&self) -> &'static str { "minecraft:black_concrete_powder" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackConcretePowder {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Kelp {
    fn resource_key(&self) -> &'static str { "minecraft:kelp" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Kelp {
    type Attributes = AgeIntRangeAttribute_0_25;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for KelpPlant {
    fn resource_key(&self) -> &'static str { "minecraft:kelp_plant" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for KelpPlant {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DriedKelpBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dried_kelp_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DriedKelpBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TurtleEgg {
    fn resource_key(&self) -> &'static str { "minecraft:turtle_egg" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TurtleEgg {
    type Attributes = (EggsIntRangeAttribute, HatchIntRangeAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SnifferEgg {
    fn resource_key(&self) -> &'static str { "minecraft:sniffer_egg" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SnifferEgg {
    type Attributes = HatchIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadTubeCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dead_tube_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeadTubeCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBrainCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dead_brain_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeadBrainCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBubbleCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dead_bubble_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeadBubbleCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadFireCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dead_fire_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeadFireCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadHornCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dead_horn_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeadHornCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TubeCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:tube_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TubeCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BrainCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:brain_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrainCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BubbleCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:bubble_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BubbleCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for FireCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:fire_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FireCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for HornCoralBlock {
    fn resource_key(&self) -> &'static str { "minecraft:horn_coral_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for HornCoralBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadTubeCoral {
    fn resource_key(&self) -> &'static str { "minecraft:dead_tube_coral" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadTubeCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBrainCoral {
    fn resource_key(&self) -> &'static str { "minecraft:dead_brain_coral" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBrainCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBubbleCoral {
    fn resource_key(&self) -> &'static str { "minecraft:dead_bubble_coral" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBubbleCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadFireCoral {
    fn resource_key(&self) -> &'static str { "minecraft:dead_fire_coral" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadFireCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadHornCoral {
    fn resource_key(&self) -> &'static str { "minecraft:dead_horn_coral" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadHornCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TubeCoral {
    fn resource_key(&self) -> &'static str { "minecraft:tube_coral" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TubeCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrainCoral {
    fn resource_key(&self) -> &'static str { "minecraft:brain_coral" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrainCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BubbleCoral {
    fn resource_key(&self) -> &'static str { "minecraft:bubble_coral" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BubbleCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FireCoral {
    fn resource_key(&self) -> &'static str { "minecraft:fire_coral" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for FireCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HornCoral {
    fn resource_key(&self) -> &'static str { "minecraft:horn_coral" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for HornCoral {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadTubeCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_tube_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadTubeCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBrainCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_brain_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBrainCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBubbleCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_bubble_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBubbleCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadFireCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_fire_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadFireCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadHornCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_horn_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadHornCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TubeCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:tube_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TubeCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrainCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:brain_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrainCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BubbleCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:bubble_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BubbleCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FireCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:fire_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for FireCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HornCoralFan {
    fn resource_key(&self) -> &'static str { "minecraft:horn_coral_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for HornCoralFan {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadTubeCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_tube_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadTubeCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBrainCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_brain_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBrainCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadBubbleCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_bubble_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadBubbleCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadFireCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_fire_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadFireCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeadHornCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:dead_horn_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for DeadHornCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TubeCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:tube_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TubeCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrainCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:brain_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BrainCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BubbleCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:bubble_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BubbleCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for FireCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:fire_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for FireCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HornCoralWallFan {
    fn resource_key(&self) -> &'static str { "minecraft:horn_coral_wall_fan" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for HornCoralWallFan {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SeaPickle {
    fn resource_key(&self) -> &'static str { "minecraft:sea_pickle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 6u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SeaPickle {
    type Attributes = (PicklesIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueIce {
    fn resource_key(&self) -> &'static str { "minecraft:blue_ice" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.8f32 }
    fn resistance(&self) -> f32 { 2.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueIce {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Conduit {
    fn resource_key(&self) -> &'static str { "minecraft:conduit" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Conduit {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BambooSapling {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo_sapling" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BambooSapling {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Bamboo {
    fn resource_key(&self) -> &'static str { "minecraft:bamboo" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Bamboo {
    type Attributes = (AgeIntRangeAttribute_0_1, LeavesEnumAttribute, StageIntRangeAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedBamboo {
    fn resource_key(&self) -> &'static str { "minecraft:potted_bamboo" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedBamboo {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for VoidAir {
    fn resource_key(&self) -> &'static str { "minecraft:void_air" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for VoidAir {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CaveAir {
    fn resource_key(&self) -> &'static str { "minecraft:cave_air" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CaveAir {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BubbleColumn {
    fn resource_key(&self) -> &'static str { "minecraft:bubble_column" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BubbleColumn {
    type Attributes = DragBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedGraniteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_granite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedGraniteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothRedSandstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_red_sandstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothRedSandstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyStoneBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_stone_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyStoneBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDioriteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_diorite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDioriteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyCobblestoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_cobblestone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyCobblestoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndStoneBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:end_stone_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndStoneBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:stone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothSandstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_sandstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothSandstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothQuartzStairs {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_quartz_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothQuartzStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GraniteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:granite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GraniteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AndesiteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:andesite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AndesiteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedNetherBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:red_nether_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedNetherBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedAndesiteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_andesite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedAndesiteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DioriteStairs {
    fn resource_key(&self) -> &'static str { "minecraft:diorite_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DioriteStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedGraniteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_granite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedGraniteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothRedSandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_red_sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothRedSandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyStoneBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_stone_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyStoneBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDioriteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_diorite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDioriteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyCobblestoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_cobblestone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyCobblestoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndStoneBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:end_stone_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndStoneBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothSandstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_sandstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothSandstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothQuartzSlab {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_quartz_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothQuartzSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GraniteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:granite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GraniteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AndesiteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:andesite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AndesiteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedNetherBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:red_nether_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedNetherBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedAndesiteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_andesite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedAndesiteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DioriteSlab {
    fn resource_key(&self) -> &'static str { "minecraft:diorite_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DioriteSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PrismarineWall {
    fn resource_key(&self) -> &'static str { "minecraft:prismarine_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PrismarineWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedSandstoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:red_sandstone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedSandstoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossyStoneBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:mossy_stone_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossyStoneBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GraniteWall {
    fn resource_key(&self) -> &'static str { "minecraft:granite_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GraniteWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StoneBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:stone_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StoneBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MudBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:mud_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MudBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:nether_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetherBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AndesiteWall {
    fn resource_key(&self) -> &'static str { "minecraft:andesite_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AndesiteWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedNetherBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:red_nether_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedNetherBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SandstoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:sandstone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SandstoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for EndStoneBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:end_stone_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 9f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for EndStoneBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DioriteWall {
    fn resource_key(&self) -> &'static str { "minecraft:diorite_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DioriteWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Scaffolding {
    fn resource_key(&self) -> &'static str { "minecraft:scaffolding" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Scaffolding {
    type Attributes = (BottomBooleanAttribute, DistanceIntRangeAttribute_0_7, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Loom {
    fn resource_key(&self) -> &'static str { "minecraft:loom" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Loom {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Barrel {
    fn resource_key(&self) -> &'static str { "minecraft:barrel" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Barrel {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, OpenBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Smoker {
    fn resource_key(&self) -> &'static str { "minecraft:smoker" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Smoker {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlastFurnace {
    fn resource_key(&self) -> &'static str { "minecraft:blast_furnace" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlastFurnace {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CartographyTable {
    fn resource_key(&self) -> &'static str { "minecraft:cartography_table" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CartographyTable {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for FletchingTable {
    fn resource_key(&self) -> &'static str { "minecraft:fletching_table" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FletchingTable {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Grindstone {
    fn resource_key(&self) -> &'static str { "minecraft:grindstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Grindstone {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East);
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Lectern {
    fn resource_key(&self) -> &'static str { "minecraft:lectern" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Lectern {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HasBookBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmithingTable {
    fn resource_key(&self) -> &'static str { "minecraft:smithing_table" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2.5f32 }
    fn resistance(&self) -> f32 { 2.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmithingTable {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Stonecutter {
    fn resource_key(&self) -> &'static str { "minecraft:stonecutter" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Stonecutter {
    type Attributes = FacingEnumAttribute_North_South_West_East;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Bell {
    fn resource_key(&self) -> &'static str { "minecraft:bell" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Bell {
    type Attributes = (AttachmentEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Lantern {
    fn resource_key(&self) -> &'static str { "minecraft:lantern" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Lantern {
    type Attributes = (HangingBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulLantern {
    fn resource_key(&self) -> &'static str { "minecraft:soul_lantern" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SoulLantern {
    type Attributes = (HangingBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Campfire {
    fn resource_key(&self) -> &'static str { "minecraft:campfire" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Campfire {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute, SignalFireBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SoulCampfire {
    fn resource_key(&self) -> &'static str { "minecraft:soul_campfire" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SoulCampfire {
    type Attributes = (FacingEnumAttribute_North_South_West_East, LitBooleanAttribute, SignalFireBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SweetBerryBush {
    fn resource_key(&self) -> &'static str { "minecraft:sweet_berry_bush" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SweetBerryBush {
    type Attributes = AgeIntRangeAttribute_0_3;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedStem {
    fn resource_key(&self) -> &'static str { "minecraft:warped_stem" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedStem {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedWarpedStem {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_warped_stem" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedWarpedStem {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedHyphae {
    fn resource_key(&self) -> &'static str { "minecraft:warped_hyphae" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedHyphae {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedWarpedHyphae {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_warped_hyphae" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedWarpedHyphae {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedNylium {
    fn resource_key(&self) -> &'static str { "minecraft:warped_nylium" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedNylium {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedFungus {
    fn resource_key(&self) -> &'static str { "minecraft:warped_fungus" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedFungus {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedWartBlock {
    fn resource_key(&self) -> &'static str { "minecraft:warped_wart_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedWartBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedRoots {
    fn resource_key(&self) -> &'static str { "minecraft:warped_roots" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedRoots {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetherSprouts {
    fn resource_key(&self) -> &'static str { "minecraft:nether_sprouts" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for NetherSprouts {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonStem {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_stem" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonStem {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedCrimsonStem {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_crimson_stem" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedCrimsonStem {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonHyphae {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_hyphae" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonHyphae {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StrippedCrimsonHyphae {
    fn resource_key(&self) -> &'static str { "minecraft:stripped_crimson_hyphae" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StrippedCrimsonHyphae {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonNylium {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_nylium" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.4f32 }
    fn resistance(&self) -> f32 { 0.4f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonNylium {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonFungus {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_fungus" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonFungus {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Shroomlight {
    fn resource_key(&self) -> &'static str { "minecraft:shroomlight" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Shroomlight {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WeepingVines {
    fn resource_key(&self) -> &'static str { "minecraft:weeping_vines" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WeepingVines {
    type Attributes = AgeIntRangeAttribute_0_25;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeepingVinesPlant {
    fn resource_key(&self) -> &'static str { "minecraft:weeping_vines_plant" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WeepingVinesPlant {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TwistingVines {
    fn resource_key(&self) -> &'static str { "minecraft:twisting_vines" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TwistingVines {
    type Attributes = AgeIntRangeAttribute_0_25;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TwistingVinesPlant {
    fn resource_key(&self) -> &'static str { "minecraft:twisting_vines_plant" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for TwistingVinesPlant {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonRoots {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_roots" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonRoots {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedPlanks {
    fn resource_key(&self) -> &'static str { "minecraft:warped_planks" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedPlanks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonSlab {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedSlab {
    fn resource_key(&self) -> &'static str { "minecraft:warped_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedPressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:warped_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedPressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonFence {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedFence {
    fn resource_key(&self) -> &'static str { "minecraft:warped_fence" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedFence {
    type Attributes = (EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(31u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:warped_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedFenceGate {
    fn resource_key(&self) -> &'static str { "minecraft:warped_fence_gate" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedFenceGate {
    type Attributes = (FacingEnumAttribute_North_South_West_East, InWallBooleanAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonStairs {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedStairs {
    fn resource_key(&self) -> &'static str { "minecraft:warped_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonButton {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedButton {
    fn resource_key(&self) -> &'static str { "minecraft:warped_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonDoor {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrimsonDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedDoor {
    fn resource_key(&self) -> &'static str { "minecraft:warped_door" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WarpedDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonSign {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedSign {
    fn resource_key(&self) -> &'static str { "minecraft:warped_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedSign {
    type Attributes = (RotationIntRangeAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CrimsonWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:crimson_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CrimsonWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WarpedWallSign {
    fn resource_key(&self) -> &'static str { "minecraft:warped_wall_sign" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for WarpedWallSign {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for StructureBlock {
    fn resource_key(&self) -> &'static str { "minecraft:structure_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for StructureBlock {
    type Attributes = ModeEnumAttribute_Save_Load_Corner_Data;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Jigsaw {
    fn resource_key(&self) -> &'static str { "minecraft:jigsaw" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { false }
    fn hardness(&self) -> f32 { -1f32 }
    fn resistance(&self) -> f32 { 3600000f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Jigsaw {
    type Attributes = OrientationEnumAttribute;
    const DEFAULT: Self = Self(10u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Composter {
    fn resource_key(&self) -> &'static str { "minecraft:composter" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Composter {
    type Attributes = LevelIntRangeAttribute_0_8;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Target {
    fn resource_key(&self) -> &'static str { "minecraft:target" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Target {
    type Attributes = PowerIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BeeNest {
    fn resource_key(&self) -> &'static str { "minecraft:bee_nest" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BeeNest {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HoneyLevelIntRangeAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Beehive {
    fn resource_key(&self) -> &'static str { "minecraft:beehive" }
    fn material(&self) -> &'static str { "minecraft:mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Beehive {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HoneyLevelIntRangeAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HoneyBlock {
    fn resource_key(&self) -> &'static str { "minecraft:honey_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for HoneyBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for HoneycombBlock {
    fn resource_key(&self) -> &'static str { "minecraft:honeycomb_block" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.6f32 }
    fn resistance(&self) -> f32 { 0.6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for HoneycombBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for NetheriteBlock {
    fn resource_key(&self) -> &'static str { "minecraft:netherite_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for NetheriteBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for AncientDebris {
    fn resource_key(&self) -> &'static str { "minecraft:ancient_debris" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 30f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AncientDebris {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CryingObsidian {
    fn resource_key(&self) -> &'static str { "minecraft:crying_obsidian" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 10u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CryingObsidian {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RespawnAnchor {
    fn resource_key(&self) -> &'static str { "minecraft:respawn_anchor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RespawnAnchor {
    type Attributes = ChargesIntRangeAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedCrimsonFungus {
    fn resource_key(&self) -> &'static str { "minecraft:potted_crimson_fungus" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedCrimsonFungus {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedWarpedFungus {
    fn resource_key(&self) -> &'static str { "minecraft:potted_warped_fungus" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedWarpedFungus {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedCrimsonRoots {
    fn resource_key(&self) -> &'static str { "minecraft:potted_crimson_roots" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedCrimsonRoots {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedWarpedRoots {
    fn resource_key(&self) -> &'static str { "minecraft:potted_warped_roots" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedWarpedRoots {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Lodestone {
    fn resource_key(&self) -> &'static str { "minecraft:lodestone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Lodestone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Blackstone {
    fn resource_key(&self) -> &'static str { "minecraft:blackstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Blackstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:blackstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackstoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:blackstone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackstoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:blackstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstone {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrackedPolishedBlackstoneBricks {
    fn resource_key(&self) -> &'static str { "minecraft:cracked_polished_blackstone_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrackedPolishedBlackstoneBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledPolishedBlackstone {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_polished_blackstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledPolishedBlackstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GildedBlackstone {
    fn resource_key(&self) -> &'static str { "minecraft:gilded_blackstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GildedBlackstone {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstonePressurePlate {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_pressure_plate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstonePressurePlate {
    type Attributes = PoweredBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneButton {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_button" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneButton {
    type Attributes = (FaceEnumAttribute, FacingEnumAttribute_North_South_West_East, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedBlackstoneWall {
    fn resource_key(&self) -> &'static str { "minecraft:polished_blackstone_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedBlackstoneWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledNetherBricks {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_nether_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledNetherBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrackedNetherBricks {
    fn resource_key(&self) -> &'static str { "minecraft:cracked_nether_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 2f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrackedNetherBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for QuartzBricks {
    fn resource_key(&self) -> &'static str { "minecraft:quartz_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.8f32 }
    fn resistance(&self) -> f32 { 0.8f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for QuartzBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Candle {
    fn resource_key(&self) -> &'static str { "minecraft:candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Candle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteCandle {
    fn resource_key(&self) -> &'static str { "minecraft:white_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeCandle {
    fn resource_key(&self) -> &'static str { "minecraft:orange_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaCandle {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueCandle {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowCandle {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeCandle {
    fn resource_key(&self) -> &'static str { "minecraft:lime_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkCandle {
    fn resource_key(&self) -> &'static str { "minecraft:pink_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayCandle {
    fn resource_key(&self) -> &'static str { "minecraft:gray_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayCandle {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanCandle {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleCandle {
    fn resource_key(&self) -> &'static str { "minecraft:purple_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueCandle {
    fn resource_key(&self) -> &'static str { "minecraft:blue_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownCandle {
    fn resource_key(&self) -> &'static str { "minecraft:brown_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenCandle {
    fn resource_key(&self) -> &'static str { "minecraft:green_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedCandle {
    fn resource_key(&self) -> &'static str { "minecraft:red_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackCandle {
    fn resource_key(&self) -> &'static str { "minecraft:black_candle" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackCandle {
    type Attributes = (CandlesIntRangeAttribute, LitBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WhiteCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:white_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WhiteCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OrangeCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:orange_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OrangeCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MagentaCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:magenta_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MagentaCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightBlueCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:light_blue_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightBlueCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for YellowCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:yellow_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for YellowCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LimeCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:lime_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LimeCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:pink_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PinkCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GrayCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:gray_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GrayCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightGrayCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:light_gray_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightGrayCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CyanCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:cyan_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CyanCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PurpleCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:purple_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PurpleCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlueCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:blue_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlueCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BrownCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:brown_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BrownCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for GreenCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:green_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for GreenCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RedCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:red_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RedCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BlackCandleCake {
    fn resource_key(&self) -> &'static str { "minecraft:black_candle_cake" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BlackCandleCake {
    type Attributes = LitBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for AmethystBlock {
    fn resource_key(&self) -> &'static str { "minecraft:amethyst_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AmethystBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BuddingAmethyst {
    fn resource_key(&self) -> &'static str { "minecraft:budding_amethyst" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BuddingAmethyst {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for AmethystCluster {
    fn resource_key(&self) -> &'static str { "minecraft:amethyst_cluster" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 5u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for AmethystCluster {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LargeAmethystBud {
    fn resource_key(&self) -> &'static str { "minecraft:large_amethyst_bud" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 4u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LargeAmethystBud {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MediumAmethystBud {
    fn resource_key(&self) -> &'static str { "minecraft:medium_amethyst_bud" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 2u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MediumAmethystBud {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmallAmethystBud {
    fn resource_key(&self) -> &'static str { "minecraft:small_amethyst_bud" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmallAmethystBud {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Tuff {
    fn resource_key(&self) -> &'static str { "minecraft:tuff" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Tuff {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffSlab {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffStairs {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffWall {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedTuff {
    fn resource_key(&self) -> &'static str { "minecraft:polished_tuff" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedTuff {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedTuffSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_tuff_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedTuffSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedTuffStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_tuff_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedTuffStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedTuffWall {
    fn resource_key(&self) -> &'static str { "minecraft:polished_tuff_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedTuffWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledTuff {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_tuff" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledTuff {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffBricks {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TuffBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:tuff_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TuffBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledTuffBricks {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_tuff_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledTuffBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Calcite {
    fn resource_key(&self) -> &'static str { "minecraft:calcite" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.75f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Calcite {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for TintedGlass {
    fn resource_key(&self) -> &'static str { "minecraft:tinted_glass" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TintedGlass {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PowderSnow {
    fn resource_key(&self) -> &'static str { "minecraft:powder_snow" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.25f32 }
    fn resistance(&self) -> f32 { 0.25f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PowderSnow {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SculkSensor {
    fn resource_key(&self) -> &'static str { "minecraft:sculk_sensor" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SculkSensor {
    type Attributes = (PowerIntRangeAttribute, SculkSensorPhaseEnumAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CalibratedSculkSensor {
    fn resource_key(&self) -> &'static str { "minecraft:calibrated_sculk_sensor" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 1u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CalibratedSculkSensor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, PowerIntRangeAttribute, SculkSensorPhaseEnumAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Sculk {
    fn resource_key(&self) -> &'static str { "minecraft:sculk" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Sculk {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for SculkVein {
    fn resource_key(&self) -> &'static str { "minecraft:sculk_vein" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.2f32 }
    fn resistance(&self) -> f32 { 0.2f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SculkVein {
    type Attributes = (DownBooleanAttribute, EastBooleanAttribute, NorthBooleanAttribute, SouthBooleanAttribute, UpBooleanAttribute, WaterloggedBooleanAttribute, WestBooleanAttribute);
    const DEFAULT: Self = Self(127u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SculkCatalyst {
    fn resource_key(&self) -> &'static str { "minecraft:sculk_catalyst" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 6u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SculkCatalyst {
    type Attributes = BloomBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SculkShrieker {
    fn resource_key(&self) -> &'static str { "minecraft:sculk_shrieker" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SculkShrieker {
    type Attributes = (CanSummonBooleanAttribute, ShriekingBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(7u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperBlock {
    fn resource_key(&self) -> &'static str { "minecraft:copper_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCopper {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCopper {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCopper {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperOre {
    fn resource_key(&self) -> &'static str { "minecraft:copper_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateCopperOre {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_copper_ore" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 4.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateCopperOre {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedChiseledCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_chiseled_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedChiseledCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCopperBlock {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_copper_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCopperBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCutCopper {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_cut_copper" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCutCopper {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCutCopperStairs {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_cut_copper_stairs" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCutCopperStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCutCopperSlab {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_cut_copper_slab" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCutCopperSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCopperDoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_copper_door" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCopperDoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, HingeEnumAttribute, OpenBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCopperTrapdoor {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_copper_trapdoor" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCopperTrapdoor {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, OpenBooleanAttribute, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(15u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCopperGrate {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_copper_grate" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCopperGrate {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ExposedCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:exposed_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ExposedCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WeatheredCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:weathered_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WeatheredCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for OxidizedCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:oxidized_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OxidizedCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedExposedCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_exposed_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedExposedCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedWeatheredCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_weathered_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedWeatheredCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for WaxedOxidizedCopperBulb {
    fn resource_key(&self) -> &'static str { "minecraft:waxed_oxidized_copper_bulb" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for WaxedOxidizedCopperBulb {
    type Attributes = (LitBooleanAttribute, PoweredBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for LightningRod {
    fn resource_key(&self) -> &'static str { "minecraft:lightning_rod" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for LightningRod {
    type Attributes = (FacingEnumAttribute_North_East_South_West_Up_Down, PoweredBooleanAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(19u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PointedDripstone {
    fn resource_key(&self) -> &'static str { "minecraft:pointed_dripstone" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PointedDripstone {
    type Attributes = (ThicknessEnumAttribute, VerticalDirectionEnumAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(5u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DripstoneBlock {
    fn resource_key(&self) -> &'static str { "minecraft:dripstone_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DripstoneBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CaveVines {
    fn resource_key(&self) -> &'static str { "minecraft:cave_vines" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CaveVines {
    type Attributes = (AgeIntRangeAttribute_0_25, BerriesBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CaveVinesPlant {
    fn resource_key(&self) -> &'static str { "minecraft:cave_vines_plant" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for CaveVinesPlant {
    type Attributes = BerriesBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SporeBlossom {
    fn resource_key(&self) -> &'static str { "minecraft:spore_blossom" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SporeBlossom {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Azalea {
    fn resource_key(&self) -> &'static str { "minecraft:azalea" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Azalea {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for FloweringAzalea {
    fn resource_key(&self) -> &'static str { "minecraft:flowering_azalea" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for FloweringAzalea {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for MossCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:moss_carpet" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossCarpet {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PinkPetals {
    fn resource_key(&self) -> &'static str { "minecraft:pink_petals" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PinkPetals {
    type Attributes = (FacingEnumAttribute_North_South_West_East, FlowerAmountIntRangeAttribute);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for MossBlock {
    fn resource_key(&self) -> &'static str { "minecraft:moss_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for MossBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for BigDripleaf {
    fn resource_key(&self) -> &'static str { "minecraft:big_dripleaf" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for BigDripleaf {
    type Attributes = (FacingEnumAttribute_North_South_West_East, TiltEnumAttribute, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for BigDripleafStem {
    fn resource_key(&self) -> &'static str { "minecraft:big_dripleaf_stem" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for BigDripleafStem {
    type Attributes = (FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmallDripleaf {
    fn resource_key(&self) -> &'static str { "minecraft:small_dripleaf" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for SmallDripleaf {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Upper_Lower, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HangingRoots {
    fn resource_key(&self) -> &'static str { "minecraft:hanging_roots" }
    fn material(&self) -> &'static str { "minecraft:plant;mineable/axe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for HangingRoots {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for RootedDirt {
    fn resource_key(&self) -> &'static str { "minecraft:rooted_dirt" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RootedDirt {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Mud {
    fn resource_key(&self) -> &'static str { "minecraft:mud" }
    fn material(&self) -> &'static str { "minecraft:mineable/shovel" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.5f32 }
    fn resistance(&self) -> f32 { 0.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Mud {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for Deepslate {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Deepslate {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CobbledDeepslate {
    fn resource_key(&self) -> &'static str { "minecraft:cobbled_deepslate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobbledDeepslate {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CobbledDeepslateStairs {
    fn resource_key(&self) -> &'static str { "minecraft:cobbled_deepslate_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobbledDeepslateStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CobbledDeepslateSlab {
    fn resource_key(&self) -> &'static str { "minecraft:cobbled_deepslate_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobbledDeepslateSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for CobbledDeepslateWall {
    fn resource_key(&self) -> &'static str { "minecraft:cobbled_deepslate_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CobbledDeepslateWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDeepslate {
    fn resource_key(&self) -> &'static str { "minecraft:polished_deepslate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDeepslate {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDeepslateStairs {
    fn resource_key(&self) -> &'static str { "minecraft:polished_deepslate_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDeepslateStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDeepslateSlab {
    fn resource_key(&self) -> &'static str { "minecraft:polished_deepslate_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDeepslateSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PolishedDeepslateWall {
    fn resource_key(&self) -> &'static str { "minecraft:polished_deepslate_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PolishedDeepslateWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateTiles {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_tiles" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateTiles {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateTileStairs {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_tile_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateTileStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateTileSlab {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_tile_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateTileSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateTileWall {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_tile_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateTileWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateBricks {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateBrickStairs {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_brick_stairs" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateBrickStairs {
    type Attributes = (FacingEnumAttribute_North_South_West_East, HalfEnumAttribute_Top_Bottom, ShapeEnumAttribute_Straight_InnerLeft_InnerRight_OuterLeft_OuterRight, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(11u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateBrickSlab {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_brick_slab" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateBrickSlab {
    type Attributes = (TypeEnumAttribute_Top_Bottom_Double, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for DeepslateBrickWall {
    fn resource_key(&self) -> &'static str { "minecraft:deepslate_brick_wall" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DeepslateBrickWall {
    type Attributes = (EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, UpBooleanAttribute, WaterloggedBooleanAttribute, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(3u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for ChiseledDeepslate {
    fn resource_key(&self) -> &'static str { "minecraft:chiseled_deepslate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ChiseledDeepslate {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrackedDeepslateBricks {
    fn resource_key(&self) -> &'static str { "minecraft:cracked_deepslate_bricks" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrackedDeepslateBricks {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for CrackedDeepslateTiles {
    fn resource_key(&self) -> &'static str { "minecraft:cracked_deepslate_tiles" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 3.5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for CrackedDeepslateTiles {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for InfestedDeepslate {
    fn resource_key(&self) -> &'static str { "minecraft:infested_deepslate" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 0.75f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for InfestedDeepslate {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for SmoothBasalt {
    fn resource_key(&self) -> &'static str { "minecraft:smooth_basalt" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.25f32 }
    fn resistance(&self) -> f32 { 4.2f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for SmoothBasalt {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RawIronBlock {
    fn resource_key(&self) -> &'static str { "minecraft:raw_iron_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RawIronBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RawCopperBlock {
    fn resource_key(&self) -> &'static str { "minecraft:raw_copper_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RawCopperBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for RawGoldBlock {
    fn resource_key(&self) -> &'static str { "minecraft:raw_gold_block" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 5f32 }
    fn resistance(&self) -> f32 { 6f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for RawGoldBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedAzaleaBush {
    fn resource_key(&self) -> &'static str { "minecraft:potted_azalea_bush" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedAzaleaBush {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PottedFloweringAzaleaBush {
    fn resource_key(&self) -> &'static str { "minecraft:potted_flowering_azalea_bush" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PottedFloweringAzaleaBush {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for OchreFroglight {
    fn resource_key(&self) -> &'static str { "minecraft:ochre_froglight" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for OchreFroglight {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for VerdantFroglight {
    fn resource_key(&self) -> &'static str { "minecraft:verdant_froglight" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for VerdantFroglight {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PearlescentFroglight {
    fn resource_key(&self) -> &'static str { "minecraft:pearlescent_froglight" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.3f32 }
    fn resistance(&self) -> f32 { 0.3f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 15u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PearlescentFroglight {
    type Attributes = AxisEnumAttribute_X_Y_Z;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Frogspawn {
    fn resource_key(&self) -> &'static str { "minecraft:frogspawn" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for Frogspawn {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for ReinforcedDeepslate {
    fn resource_key(&self) -> &'static str { "minecraft:reinforced_deepslate" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 55f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for ReinforcedDeepslate {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for DecoratedPot {
    fn resource_key(&self) -> &'static str { "minecraft:decorated_pot" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0f32 }
    fn resistance(&self) -> f32 { 0f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for DecoratedPot {
    type Attributes = (CrackedBooleanAttribute, FacingEnumAttribute_North_South_West_East, WaterloggedBooleanAttribute);
    const DEFAULT: Self = Self(9u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Crafter {
    fn resource_key(&self) -> &'static str { "minecraft:crafter" }
    fn material(&self) -> &'static str { "minecraft:incorrect_for_wooden_tool" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 1.5f32 }
    fn resistance(&self) -> f32 { 3.5f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Crafter {
    type Attributes = (CraftingBooleanAttribute, OrientationEnumAttribute, TriggeredBooleanAttribute);
    const DEFAULT: Self = Self(45u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for TrialSpawner {
    fn resource_key(&self) -> &'static str { "minecraft:trial_spawner" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 50f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for TrialSpawner {
    type Attributes = (OminousBooleanAttribute, TrialSpawnerStateEnumAttribute);
    const DEFAULT: Self = Self(6u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for Vault {
    fn resource_key(&self) -> &'static str { "minecraft:vault" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 50f32 }
    fn resistance(&self) -> f32 { 50f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 6u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for Vault {
    type Attributes = (FacingEnumAttribute_North_South_West_East, OminousBooleanAttribute, VaultStateEnumAttribute);
    const DEFAULT: Self = Self(4u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for HeavyCore {
    fn resource_key(&self) -> &'static str { "minecraft:heavy_core" }
    fn material(&self) -> &'static str { "minecraft:mineable/pickaxe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 10f32 }
    fn resistance(&self) -> f32 { 1200f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for HeavyCore {
    type Attributes = WaterloggedBooleanAttribute;
    const DEFAULT: Self = Self(1u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleMossBlock {
    fn resource_key(&self) -> &'static str { "minecraft:pale_moss_block" }
    fn material(&self) -> &'static str { "minecraft:mineable/hoe" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleMossBlock {
    type Attributes = ();
    const DEFAULT: Self = Self;
    fn to_relative(&self) -> usize { 0usize }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleMossCarpet {
    fn resource_key(&self) -> &'static str { "minecraft:pale_moss_carpet" }
    fn material(&self) -> &'static str { "minecraft:plant" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { false }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:block" }
}
impl BlockStateExt<V1_21_2> for PaleMossCarpet {
    type Attributes = (BottomBooleanAttribute, EastEnumAttribute_None_Low_Tall, NorthEnumAttribute_None_Low_Tall, SouthEnumAttribute_None_Low_Tall, WestEnumAttribute_None_Low_Tall);
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

impl BlockState<V1_21_2> for PaleHangingMoss {
    fn resource_key(&self) -> &'static str { "minecraft:pale_hanging_moss" }
    fn material(&self) -> &'static str { "minecraft:default" }
    fn diggable(&self) -> bool { true }
    fn hardness(&self) -> f32 { 0.1f32 }
    fn resistance(&self) -> f32 { 0.1f32 }
    fn transparent(&self) -> bool { true }
    fn emit_light(&self) -> u8 { 0u8 }
    fn bounding_box(&self) -> &'static str { "minecraft:empty" }
}
impl BlockStateExt<V1_21_2> for PaleHangingMoss {
    type Attributes = TipBooleanAttribute;
    const DEFAULT: Self = Self(0u16);
    fn to_relative(&self) -> usize { usize::from(self.0) }
    fn from_relative(relative: usize) -> Option<Self> {
        if relative < <Self as BlockStateExt<V1_21_2>>::STATE_COUNT { Some(Self(relative as u16)) } else { None }
    }
}

