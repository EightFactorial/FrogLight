[package]
name = "froglight-internal"
version = { workspace = true }
edition = { workspace = true }
license = { workspace = true }
authors = { workspace = true }
homepage = { workspace = true }
repository = { workspace = true }
readme = { workspace = true }

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints]
workspace = true

[dev-dependencies]
bevy_mod_debugdump = "0.11.0"

[dependencies]
bevy = { workspace = true, optional = true, default-features = false }
froglight-block = { version = "0.1.0", path = "../froglight-block" }
froglight-common = { version = "0.1.0", path = "../froglight-common" }
froglight-entity = { version = "0.1.0", path = "../froglight-entity" }
froglight-network = { version = "0.1.0", path = "../froglight-network" }
froglight-physics = { version = "0.1.0", path = "../froglight-physics" }
froglight-protocol = { version = "0.1.0", path = "../froglight-protocol" }
froglight-registry = { version = "0.1.0", path = "../froglight-registry" }
froglight-utils = { version = "0.1.0", path = "../froglight-utils" }
froglight-world = { version = "0.1.0", path = "../froglight-world" }

bytemuck = { workspace = true, optional = true, features = [
    "nightly_docs",
    "nightly_portable_simd",
    "nightly_stdsimd",
] }
glam = { workspace = true, optional = true, features = ["core-simd"] }
hashbrown = { workspace = true, optional = true, features = ["nightly"] }
parking_lot = { workspace = true, optional = true, features = [
    "hardware-lock-elision",
    "nightly",
] }

# Enable x11 on linux, prevents compilation errors
[target.'cfg(target_os = "linux")'.dependencies]
bevy = { workspace = true, optional = true, default-features = false, features = [
    "x11",
] }

[features]
default = ["presets"]

# Enables preset plugin groups
presets = ["dep:bevy"]

# Enables egui inspector trait implementations
inspector = ["froglight-common/inspector"]

# Enable optimizations using the nightly compiler
nightly = ["dep:bytemuck", "dep:glam", "dep:hashbrown", "dep:parking_lot"]

# Generate graphs used for visualizing systems
[[example]]
name = "system-graph"
path = "examples/system-graph/main.rs"
