[package]
name = "froglight-protocol"
version = { workspace = true }
edition = { workspace = true }
license = { workspace = true }
authors = { workspace = true }
homepage = { workspace = true }
repository = { workspace = true }
readme = { workspace = true }

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints]
workspace = true

[dev-dependencies]
criterion = { workspace = true }
proptest = { workspace = true }

[dependencies]
bevy_app = { workspace = true, optional = true }
bevy_log = { workspace = true, optional = true }
bevy_math = { workspace = true }
bevy_reflect = { workspace = true, optional = true }
bitvec = { workspace = true }
bytemuck = { workspace = true, features = ["derive", "nightly_stdsimd"] }
compact_str = { workspace = true, features = ["serde", "smallvec"] }
derive_more = { workspace = true }
froglight-macros = { version = "0.1.0", path = "../froglight-macros", features = [
    "protocol",
] }
futures-lite = { workspace = true }
hashbrown = { workspace = true, features = ["serde"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
simdnbt = { workspace = true }
smallvec = { workspace = true, features = [
    "const_generics",
    "const_new",
    "serde",
    "write",
] }
thiserror = { workspace = true }
uuid = { workspace = true, features = ["serde"] }

[features]
default = []

# Enables logging through the `bevy_log` crate.
logging = ["dep:bevy_log", "froglight-macros/protocol_log"]

# Enables reflection through the `bevy_reflect` crate.
reflect = ["dep:bevy_app", "dep:bevy_reflect"]
